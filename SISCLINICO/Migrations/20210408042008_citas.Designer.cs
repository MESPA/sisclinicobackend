// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SisClinico.Context;

namespace SISCLINICO.Migrations
{
    [DbContext(typeof(SisClinicoDbContext))]
    [Migration("20210408042008_citas")]
    partial class citas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SISCLINICO.Model.Citas", b =>
                {
                    b.Property<int>("IdCitas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdDoctores")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("NombreCompletoDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreCompletoPaciente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("doctoresIdDoctores")
                        .HasColumnType("int");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdCitas");

                    b.HasIndex("doctoresIdDoctores");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("SisClinico.Model.Cotizacion", b =>
                {
                    b.Property<int>("IdCotizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.Property<string>("condicion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("correo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("descuento")
                        .HasColumnType("int");

                    b.Property<int>("idpaciente")
                        .HasColumnType("int");

                    b.Property<string>("nombrePaciente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("numeroCotizacion")
                        .HasColumnType("int");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.Property<float>("precio")
                        .HasColumnType("float");

                    b.Property<float>("subtotal")
                        .HasColumnType("float");

                    b.Property<string>("telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("total")
                        .HasColumnType("float");

                    b.HasKey("IdCotizacion");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("Cotizacion");
                });

            modelBuilder.Entity("SisClinico.Model.Diagnostico", b =>
                {
                    b.Property<int>("IdDiagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdDiagnostico");

                    b.ToTable("Diagnostico");
                });

            modelBuilder.Entity("SisClinico.Model.Doctores", b =>
                {
                    b.Property<int>("IdDoctores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Celular")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Especialidad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombres")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdDoctores");

                    b.ToTable("Doctores");
                });

            modelBuilder.Entity("SisClinico.Model.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Correo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RNC")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("SisClinico.Model.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("double");

                    b.Property<double>("Descuento")
                        .HasColumnType("double");

                    b.Property<int>("EdadCliente")
                        .HasColumnType("int");

                    b.Property<string>("EspecialidadDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Estatus")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NombreDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Pago")
                        .HasColumnType("double");

                    b.Property<string>("Procesos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SexoCliente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdFactura");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("SisClinico.Model.HistoricoPago", b =>
                {
                    b.Property<int>("IdHistorico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Abono")
                        .HasColumnType("double");

                    b.Property<string>("Comentario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Deuda")
                        .HasColumnType("double");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdFactura")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<double>("Resto")
                        .HasColumnType("double");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdHistorico");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("HistoricoPago");
                });

            modelBuilder.Entity("SisClinico.Model.Odontograma", b =>
                {
                    b.Property<int>("IdOdontograma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IdDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdPaciente")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("diagnostic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("edad")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("fechaconsult")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("fichaconsult")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("foto")
                        .HasColumnType("longblob");

                    b.Property<string>("indicacion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("motivo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("nombreDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("observaciones")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("plan_tratamiento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("process")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("sexo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdOdontograma");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("Odontograma");
                });

            modelBuilder.Entity("SisClinico.Model.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ARS")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Celular")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoElectronico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Dependiente")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Direccion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("FechaDeNacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GrupoSanguineo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NSS")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombres")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PrimerApellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SegundoApellido")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sexo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("IdPaciente");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("SisClinico.Model.Procedimientos", b =>
                {
                    b.Property<int>("IdProcedimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Costo")
                        .HasColumnType("double");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("pacienteIdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdProcedimiento");

                    b.HasIndex("pacienteIdPaciente");

                    b.ToTable("Procedimientos");
                });

            modelBuilder.Entity("SisClinico.Model.Productolicense", b =>
                {
                    b.Property<int>("IdProductolicense")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProductKey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TrialExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("IdProductolicense");

                    b.ToTable("Productolicense");
                });

            modelBuilder.Entity("SisClinico.Model.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SisClinico.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SisClinico.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SisClinico.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SisClinico.Model.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SISCLINICO.Model.Citas", b =>
                {
                    b.HasOne("SisClinico.Model.Doctores", "doctores")
                        .WithMany()
                        .HasForeignKey("doctoresIdDoctores");

                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });

            modelBuilder.Entity("SisClinico.Model.Cotizacion", b =>
                {
                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });

            modelBuilder.Entity("SisClinico.Model.Factura", b =>
                {
                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });

            modelBuilder.Entity("SisClinico.Model.HistoricoPago", b =>
                {
                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });

            modelBuilder.Entity("SisClinico.Model.Odontograma", b =>
                {
                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });

            modelBuilder.Entity("SisClinico.Model.Procedimientos", b =>
                {
                    b.HasOne("SisClinico.Model.Paciente", "paciente")
                        .WithMany()
                        .HasForeignKey("pacienteIdPaciente");
                });
#pragma warning restore 612, 618
        }
    }
}
